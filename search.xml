<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[中缀表达式求值]]></title>
      <url>http://yoursite.com/2017/09/25/complier-work/</url>
      <content type="html"><![CDATA[<p>编译原理作业：中缀表达式求值，写优雅的代码。<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> BiTreeNode &#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> key;</div><div class="line">    <span class="keyword">struct</span> BiTreeNode *leftNode;</div><div class="line">    <span class="keyword">struct</span> BiTreeNode *rightNode;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="comment">//BiTree</span></div><div class="line"><span class="keyword">class</span> BiTree &#123;</div><div class="line"></div><div class="line"><span class="keyword">protected</span>:</div><div class="line"></div><div class="line">    BiTreeNode *RootNode;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Before_Visit</span><span class="params">(BiTreeNode *Node)</span></span>;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> BiTree::Before_Visit(BiTreeNode *Node) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> leftCount, rightCount;</div><div class="line">    BiTreeNode *p = Node;</div><div class="line">    <span class="keyword">if</span>(p-&gt;leftNode==<span class="literal">NULL</span> &amp;&amp; p-&gt;rightNode==<span class="literal">NULL</span>) <span class="keyword">return</span> (p-&gt;key) - <span class="string">'0'</span>;</div><div class="line">    <span class="keyword">if</span>(p-&gt;leftNode != <span class="literal">NULL</span>)</div><div class="line">        leftCount = Before_Visit(p-&gt;leftNode);</div><div class="line">    <span class="keyword">if</span>(p-&gt;rightNode != <span class="literal">NULL</span>)</div><div class="line">        rightCount = Before_Visit(p-&gt;rightNode);</div><div class="line">    <span class="keyword">if</span>(p-&gt;key==<span class="string">'+'</span>) <span class="keyword">return</span> leftCount + rightCount;</div><div class="line">    <span class="keyword">if</span>(p-&gt;key==<span class="string">'-'</span>) <span class="keyword">return</span> leftCount - rightCount;</div><div class="line">    <span class="keyword">if</span>(p-&gt;key==<span class="string">'*'</span>) <span class="keyword">return</span> leftCount * rightCount;</div><div class="line">    <span class="keyword">if</span>(p-&gt;key==<span class="string">'/'</span>) <span class="keyword">return</span> leftCount / rightCount;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Calculator private extends BiTree</span></div><div class="line"><span class="keyword">class</span> Calculator : <span class="keyword">private</span> BiTree</div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> :</div><div class="line"></div><div class="line">    <span class="built_in">string</span> expression;</div><div class="line"></div><div class="line"><span class="keyword">public</span> :</div><div class="line"></div><div class="line">    <span class="keyword">void</span> _constructor();</div><div class="line">    <span class="function">BiTreeNode * <span class="title">main_cal</span><span class="params">(<span class="keyword">int</span> ex_start,<span class="keyword">int</span> ex_end)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_tag</span><span class="params">(<span class="keyword">int</span> ex_start, <span class="keyword">int</span> ex_end)</span></span>;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Calculator::_constructor()&#123;</div><div class="line"></div><div class="line">    <span class="built_in">string</span> input;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"please input expression string:"</span>  &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; input;</div><div class="line">    expression = input;</div><div class="line">    <span class="keyword">int</span> ex_length = input.length();</div><div class="line"></div><div class="line">    RootNode = main_cal(<span class="number">0</span>, ex_length<span class="number">-1</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; Before_Visit(RootNode);</div><div class="line">&#125;</div><div class="line"><span class="comment">//build BiTree</span></div><div class="line">BiTreeNode *Calculator::main_cal(<span class="keyword">int</span> ex_start,<span class="keyword">int</span> ex_end) &#123;</div><div class="line"></div><div class="line">    BiTreeNode *p = <span class="keyword">new</span> BiTreeNode;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(ex_start == ex_end) &#123;</div><div class="line"></div><div class="line">        p-&gt;key = expression[ex_start];</div><div class="line">        p-&gt;leftNode = <span class="literal">NULL</span>;</div><div class="line">        p-&gt;rightNode = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(expression[ex_start]==<span class="string">'('</span> &amp;&amp; expression[ex_end]==<span class="string">')'</span>) &#123;</div><div class="line"></div><div class="line">            ex_start += <span class="number">1</span>;</div><div class="line">            ex_end -= <span class="number">1</span>;</div><div class="line">        &#125; get_tag(ex_start, ex_end);</div><div class="line"></div><div class="line">        p-&gt;key = expression[index];</div><div class="line">        p-&gt;leftNode = main_cal(ex_start, index<span class="number">-1</span>);</div><div class="line">        p-&gt;rightNode = main_cal(index+<span class="number">1</span>, ex_end);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"><span class="comment">//find every root node key</span></div><div class="line"><span class="keyword">int</span> Calculator::get_tag(<span class="keyword">int</span> ex_start, <span class="keyword">int</span> ex_end) &#123;</div><div class="line"></div><div class="line">    <span class="built_in">string</span> input = expression;</div><div class="line">    <span class="keyword">int</span> brackets_exit = <span class="number">0</span>,</div><div class="line">        plus_minus_exit = <span class="number">0</span>,</div><div class="line">        tag;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=ex_start; i&lt;ex_end; i++) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((input[i]==<span class="string">'+'</span>|| input[i]==<span class="string">'-'</span>) &amp;&amp; brackets_exit==<span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">            plus_minus_exit = <span class="number">1</span>;</div><div class="line">            tag = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((input[i]==<span class="string">'*'</span> || input[i]==<span class="string">'/'</span>) &amp;&amp; plus_minus_exit==<span class="number">0</span> &amp;&amp; brackets_exit==<span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">            tag = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(input[i]==<span class="string">'('</span>) brackets_exit++;</div><div class="line">        <span class="keyword">if</span>(input[i]==<span class="string">')'</span>) brackets_exit--;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tag;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    Calculator CAL;</div><div class="line">    CAL._constructor();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>END</strong></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[opencv 人脸检测]]></title>
      <url>http://yoursite.com/2017/09/25/opencv-face/</url>
      <content type="html"><![CDATA[<h2 id="opencv-定位人脸"><a href="#opencv-定位人脸" class="headerlink" title="opencv 定位人脸"></a>opencv 定位人脸</h2><hr>
<p>主要的python库 <strong>PIL</strong> 、<strong>cv2</strong> 。这里利用opencv已经训练好的模型进行人脸定位，在opencv中以<strong>xml</strong>的文件格式存储。在人脸定位的时候需要调用对应的<strong>xx.xml</strong>。<br><a id="more"></a></p>
<h3 id="1-获取目标图片并检测人脸位置"><a href="#1-获取目标图片并检测人脸位置" class="headerlink" title="1.获取目标图片并检测人脸位置"></a>1.获取目标图片并检测人脸位置</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectFace</span><span class="params">(image_name, xml_url)</span>:</span></div><div class="line">	</div><div class="line">	img = cv2.imread(image_name)</div><div class="line">	face_cascade = cv2.CascadeClassifier(xml_url)</div><div class="line"></div><div class="line">	<span class="comment"># if img.nidm == 3:</span></div><div class="line">	grayImg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</div><div class="line">	<span class="comment"># else: </span></div><div class="line">	<span class="comment"># 	grayImg= img</span></div><div class="line"></div><div class="line">	faces = face_cascade.detectMultiScale(grayImg, <span class="number">1.3</span>, <span class="number">5</span>)</div><div class="line">	result = []</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (x, y, width, height) <span class="keyword">in</span> faces:</div><div class="line">		result.append((x, y, x+width, y+height))</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<p><strong>CascadeClassifier()</strong>函数导入前面需要的xml文件。</p>
<p><strong>cvtColor()</strong>函数降低图片颜色维度。</p>
<p><strong>detectMultiScale()</strong>函数参数人脸识别精度，1.2-5范围。</p>
<h3 id="2-截取人脸并保存"><a href="#2-截取人脸并保存" class="headerlink" title="2.截取人脸并保存"></a>2.截取人脸并保存</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveFaces</span><span class="params">(image_name, xml_url)</span>:</span></div><div class="line"></div><div class="line">	faces = selectFace(image_name, xml_url)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> faces:</div><div class="line"></div><div class="line">		save_dir = image_name.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">"_faces"</span></div><div class="line">		os.mkdir(save_dir)</div><div class="line">		count = <span class="number">0</span></div><div class="line"></div><div class="line">		<span class="keyword">for</span> (x1, y1, x2, y2) <span class="keyword">in</span> faces:</div><div class="line">			file_name = os.path.join(save_dir, str(count)+<span class="string">".jpg"</span>)</div><div class="line">			Image.open(image_name).crop((x1, y1, x2, y2)).save(file_name)</div><div class="line">			count += <span class="number">1</span></div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		print(<span class="string">"get error"</span>)</div></pre></td></tr></table></figure>
<p>这里是以原图片文件名创建文件夹，文件夹内以识别到的人脸编号保存人脸图片。</p>
<p><strong>END</strong></p>
]]></content>
      
        <categories>
            
            <category> Deep Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VUE 组件小tips集结]]></title>
      <url>http://yoursite.com/2017/09/14/vue-component/</url>
      <content type="html"><![CDATA[<p>这里是平时使用Vue.js的时候遇到的一些小问题，之后会有补充。<br><a id="more"></a></p>
<hr>
<h2 id="1-同级组件通信"><a href="#1-同级组件通信" class="headerlink" title="1.同级组件通信"></a>1.同级组件通信</h2><p>使用<strong>bus</strong>通信机制完成组件间通信</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//组件中</span></div><div class="line">methods:&#123;</div><div class="line">	<span class="attr">page</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		bus.$emit(<span class="string">'funcName'</span>, parameter)	<span class="comment">//开始通信</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//同级组件</span></div><div class="line">created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	bus.$on(<span class="string">'funcName'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">parameter</span>)</span>&#123;	<span class="comment">//收到通信</span></div><div class="line">         ... </div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>未完待续…</strong></p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬虫-模拟登录-jwgl]]></title>
      <url>http://yoursite.com/2017/09/14/jwgl-spider/</url>
      <content type="html"><![CDATA[<p>这几天在写爬虫，爬学校教务网的课表信息，然后嵌进一个成员管理系统。<br>前后总共花了两三天的时间。大致摸清了教务网新系统的套路。</p>
<hr>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>获取课表数据的时候，用户一定是在登录状态下，所以生爬课表那个页面的时候是获得不了数据的。<br>第一步就是要模拟用户在客户端登录。然后一顿看source后发现，教务网登录时首先会根据用户第一次登录<br>首页随机生成的那个<strong>session</strong>，向服务器请求获得对应的加密公钥，然后把密码在客户端加密后，带着<strong>session</strong><br>请求登录。登录成功后，就可以根据那个随机的<strong>sessioh</strong>和headers获得课表数据。之后动态数据加载，访问api这些就很简单。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>这次用到的node包是 <strong>superagent</strong>，主要功能是模拟客户端请求。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install superagent -save</div></pre></td></tr></table></figure></p>
<p>主要用法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>(<span class="string">'superagent'</span>);</div><div class="line"></div><div class="line"><span class="comment">//get session</span></div><div class="line">req</div><div class="line">.get(<span class="keyword">this</span>.main_url)   			<span class="comment">//首页url</span></div><div class="line">.end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">	<span class="keyword">let</span> public_key = &#123;&#125;;</div><div class="line">	<span class="keyword">let</span> session = res.headers[<span class="string">'set-cookie'</span>][<span class="number">0</span>].substr(<span class="number">0</span>, res.headers[<span class="string">'set-cookie'</span>][<span class="number">0</span>].indexOf(<span class="string">';'</span>));</div><div class="line">	<span class="keyword">this</span>.session = session;</div><div class="line"></div><div class="line">	&#125;)	</div><div class="line">	</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// simulate login</span></div><div class="line">req</div><div class="line">.post(<span class="keyword">this</span>.login_url)  			<span class="comment">//登录api</span></div><div class="line">.type(<span class="string">'form'</span>)</div><div class="line">.send(conf)   		   			<span class="comment">//登录信息</span></div><div class="line">.set(<span class="keyword">this</span>.login_headers)        <span class="comment">//设置访问头</span></div><div class="line">.set(&#123;<span class="string">'Cookie'</span>:session&#125;)</div><div class="line">.redirects(<span class="number">0</span>)</div><div class="line">.end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">	</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进程同步问题-医生看病问题]]></title>
      <url>http://yoursite.com/2017/05/06/process-doctors/</url>
      <content type="html"><![CDATA[<p>操作系统进程同步问题<strong>第五弹</strong>：医生看病问题</p>
<hr>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>三个病椅，十个等椅，三个医生。<br>病人来了以后，若病椅有空闲，直接去看病；<br>若病椅满，而等椅有空闲，坐在等椅上等待；<br>若病椅和等椅均满，则离开。<br>若无病人看病，医生等待。<br>给出医生和病人的程序，正确实现互斥和同步。</p>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>一开始想的是医生和病椅不是一一对等的关系，后来考虑到实际情况，比如医院里，医生应该和病椅是一一对等的关系，且位置不会发生变化。那么，<br>1.首先就需要一个互斥信号量mutex实现<strong>病人对椅子的互斥访问</strong>，并且每次访问结束后即坐下后就要释放该信号量，让下一个病人进来找座位。<br>2.每一张病椅对应一个<strong>信号量</strong>，如果椅子上没有人，医生就休息，病人来了后，通知医生。<br>3.还有就是在等椅上等待看病的病人需要<strong>互斥访问病椅</strong>。当一个病人就诊完后，通知等待的病人就诊。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>这里用队列存放三张病椅，每次病人选择病椅时get()一个位置，并且通过该位置叫醒医生，看完后，put()释放一个位置，这考虑到病人选择病椅的一个过程。声明的队列是<em>先进先出</em>的队列，即刚看完病的医生到队列最后，让医生休息一会儿。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> queue</div><div class="line"></div><div class="line"><span class="comment">#椅子的互斥信号量</span></div><div class="line">mutex = <span class="number">1</span></div><div class="line">mcond = threading.Condition()</div><div class="line">pcond = threading.Condition()</div><div class="line"><span class="comment">#病椅</span></div><div class="line">pchairs = <span class="number">3</span></div><div class="line"><span class="comment">#等椅</span></div><div class="line">wchairs = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Patient</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.num = num</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> mutex,pmutex,pchairs,wchairs</div><div class="line">        mcond.acquire()</div><div class="line">        <span class="keyword">if</span> mutex==<span class="number">0</span>:</div><div class="line">            mcond.wait()</div><div class="line">        mutex = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> wchairs&gt;<span class="number">0</span> <span class="keyword">or</span> pchairs&gt;<span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> pchairs==<span class="number">0</span>:</div><div class="line">                wchairs = wchairs - <span class="number">1</span></div><div class="line">                mutex = <span class="number">1</span></div><div class="line">                mcond.notify()</div><div class="line">                mcond.release()</div><div class="line">                pcond.acquire()</div><div class="line">                print(<span class="string">"Patient%s is waitting"</span> % self.num)</div><div class="line">                pcond.wait()</div><div class="line">                pcond.release()</div><div class="line">            <span class="comment">#选择一把病椅</span></div><div class="line">            index = dqueue.get()</div><div class="line">            pchairs = pchairs - <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> mutex==<span class="number">0</span>:</div><div class="line">                mutex = <span class="number">1</span></div><div class="line">                mcond.notify()</div><div class="line">                mcond.release()</div><div class="line">            <span class="comment">#通过病椅叫醒医生</span></div><div class="line">            doctors[index].acquire()</div><div class="line">            dmutex[index] = <span class="number">0</span></div><div class="line">            doctors[index].notify()</div><div class="line">            doctors[index].release()</div><div class="line">            print(<span class="string">"Patient%s is getting cure chosing doctors %s"</span>% (self.num,index))</div><div class="line">            time.sleep(<span class="number">2</span>)</div><div class="line">            print(<span class="string">"Patient%s is finishing cure by doctors %s"</span> % (self.num, index))</div><div class="line">            dmutex[index] = <span class="number">1</span></div><div class="line">            <span class="comment">#释放病椅</span></div><div class="line">            dqueue.put(index)</div><div class="line">            pchairs = pchairs + <span class="number">1</span></div><div class="line">            <span class="comment">#唤醒正在等待的病人</span></div><div class="line">            pcond.acquire()</div><div class="line">            pcond.notify()</div><div class="line">            pcond.release()</div><div class="line"></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"no chairs, patient%s leave"</span>%self.num)</div><div class="line">            mutex = <span class="number">1</span></div><div class="line">            mcond.notify()</div><div class="line">            mcond.release()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doctors</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.num = num</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        doctors[self.num].acquire()</div><div class="line">        <span class="keyword">if</span> dmutex[self.num] == <span class="number">1</span>:</div><div class="line">            print(<span class="string">"Doctors%s is waiting..."</span> % self.num)</div><div class="line">            doctors[self.num].wait()</div><div class="line">            print(<span class="string">"Doctors%s is working..."</span> % self.num)</div><div class="line">        doctors[self.num].release()</div><div class="line"></div><div class="line"><span class="comment">#病椅队列</span></div><div class="line">dqueue = queue.Queue(maxsize=<span class="number">3</span>)</div><div class="line">doctors = []</div><div class="line">dmutex = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</div><div class="line"><span class="comment">#每一张椅子对应一个信号量</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</div><div class="line">    doctors.append(threading.Condition())</div><div class="line"><span class="comment">#医生进程开始</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</div><div class="line">    Doctors(x).start()</div><div class="line">    dqueue.put(x)</div><div class="line"><span class="comment">#病人进程开始</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">15</span>):</div><div class="line">    Patient(x).start()</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> OS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进程同步问题-理发师问题]]></title>
      <url>http://yoursite.com/2017/05/05/process-barber/</url>
      <content type="html"><![CDATA[<p>操作系统进程同步问题<strong>第四弹</strong>：理发师问题</p>
<hr>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>假设有一个理发店只有一个理发师，一张理发时坐的椅子，若干张普通椅子顾客供等候时坐。没有顾客时，理发师就坐在理发的椅子上睡觉。顾客一到，他不是叫醒理发师，就是离开。如果理发师没有睡觉，而在为别人理发，他就会坐下来等候。如果所有的椅子都坐满了人，最后来的顾客就会离开。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用三个信号量（Semaphore）：<strong>顾客信号量</strong>，<strong>理发师信号量</strong>，<strong>互斥信号量</strong>（避免顾客在等理发师，理发师在等顾客，造成死锁）。还需要一个信号量：<strong>椅子数量</strong>。如果顾客来到时发现没有椅子，就离开，如果发现还有椅子空下就唤醒或等待理发师。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>这里是模拟实现十位顾客先后来理发<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="comment"># 椅子数（包括理发师）</span></div><div class="line">chairs = <span class="number">5</span></div><div class="line"><span class="comment"># 顾客信号量</span></div><div class="line">customers = <span class="number">0</span></div><div class="line"><span class="comment"># 理发师信号量</span></div><div class="line">barber = <span class="number">0</span></div><div class="line"><span class="comment"># 互斥信号量</span></div><div class="line">mutex = <span class="number">1</span></div><div class="line"><span class="comment">#规定一批接纳顾客</span></div><div class="line">customersnum = <span class="number">10</span></div><div class="line"></div><div class="line">cuscond = threading.Condition()</div><div class="line">barcond = threading.Condition()</div><div class="line">mcond = threading.Condition()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Barbers</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> chairs,barber,customers,mutex</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">if</span> chairs == <span class="number">6</span>:</div><div class="line">                print(<span class="string">"barber is sleeping"</span>)</div><div class="line">                chairs = chairs - <span class="number">1</span></div><div class="line">                customers = <span class="number">0</span></div><div class="line">                barber = <span class="number">0</span></div><div class="line">                mutex = <span class="number">1</span></div><div class="line">            cuscond.acquire()</div><div class="line">            <span class="keyword">if</span> customers==<span class="number">0</span>:</div><div class="line">                cuscond.wait()</div><div class="line">                print(<span class="string">"%s is awaked by customers"</span>%self.name)</div><div class="line">                mcond.acquire()</div><div class="line">                <span class="keyword">if</span> mutex == <span class="number">0</span>:</div><div class="line">                    mcond.wait()</div><div class="line">                mutex = <span class="number">0</span></div><div class="line">                chairs = chairs + <span class="number">1</span></div><div class="line">                barcond.acquire()</div><div class="line">                barber = <span class="number">1</span></div><div class="line">                barcond.notify()</div><div class="line">                barcond.release()</div><div class="line">                mutex = <span class="number">1</span></div><div class="line">                mcond.notify()</div><div class="line">                mcond.release()</div><div class="line">            cuscond.release()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Customers</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> chairs, barber, customers, mutex, customersnum</div><div class="line">        mcond.acquire()</div><div class="line">        <span class="keyword">if</span> mutex == <span class="number">0</span>:</div><div class="line">            mcond.wait()</div><div class="line">        mutex = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> chairs&gt;<span class="number">0</span>:</div><div class="line">            cuscond.acquire()</div><div class="line">            chairs = chairs - <span class="number">1</span></div><div class="line">            customers = <span class="number">1</span></div><div class="line">            cuscond.notify()</div><div class="line">            cuscond.release()</div><div class="line">            mutex = <span class="number">1</span></div><div class="line">            mcond.notify()</div><div class="line">            mcond.release()</div><div class="line">            <span class="keyword">if</span> barber==<span class="number">0</span>:</div><div class="line">                barcond.acquire()</div><div class="line">                print(<span class="string">"Customers%s is waiting"</span> % (self.name))</div><div class="line">                barcond.wait()</div><div class="line">                barcond.release()</div><div class="line">            barber = <span class="number">0</span></div><div class="line">            print(<span class="string">"Customers%s is cut by barber"</span>%(self.name))</div><div class="line">            time.sleep(<span class="number">5</span>)</div><div class="line">            chairs = chairs + <span class="number">1</span></div><div class="line">            barber = <span class="number">1</span></div><div class="line">            barcond.acquire()</div><div class="line">            barcond.notify()</div><div class="line">            barcond.release()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"chairs is full,%s leave..."</span>%(self.name))</div><div class="line">            mutex = <span class="number">1</span></div><div class="line">            mcond.notify()</div><div class="line">            mcond.release()</div><div class="line"></div><div class="line">Barbers(<span class="string">"Barber"</span>).start()</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,customersnum):</div><div class="line">    Customers(x).start()</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> OS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进程同步问题-哲学家进餐问题]]></title>
      <url>http://yoursite.com/2017/05/03/process-philosophers/</url>
      <content type="html"><![CDATA[<p>操作系统进程同步问题<strong>第三弹</strong>：哲学家进餐问题</p>
<hr>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>问题很简单，n个哲学家n支筷子，只有哲学家拿起两支筷子的时候才可以进餐，同样是一个经典的进程同步问题，第n个哲学家的左手边筷子和第n+1个哲学家右手边的筷子是互斥访问的资源。但同样会存在一个问题：<strong>死锁</strong>。这样的情景很好想。解决死锁问题有很多种的做法<br>1.规定在拿到左侧的筷子后，先检查右面的筷子是否可用。如果不可用，则先放下左侧筷子，等一段时间再重复整个过程。<br>2.最多允许四个哲学家同时进餐,以保证至少有一个哲学家能够进餐,最终总会释 放出他所使用过的两支筷子,从而可使更多的哲学家进餐。<br>3.将拿左筷子，与拿右筷子当做一个<strong>原子操作</strong>（即当左右都拿起的时候才可以进餐）<br>这里选择的是第三种的<strong>AND信号量机制</strong>。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>之前解决进程间通信问题用的是condition，这里使用的是threading中的<strong>Queue</strong>方法，之前消费者问题也用过这样的方法。</p>
<h4 id="三种类型queue"><a href="#三种类型queue" class="headerlink" title="三种类型queue"></a>三种类型queue</h4><p>1.基本FIFO队列–先进先出        <em>class Queue.Queue(maxsize=0)</em><br>2.LIFO队列–先进后出        <em>class Queue.LifoQueue(maxsize=0)</em><br>3.优先级队列        <em>class Queue.PriorityQueue(maxsize=0)</em></p>
<h4 id="queue中常用函数"><a href="#queue中常用函数" class="headerlink" title="queue中常用函数"></a>queue中常用函数</h4><p>queue中封装了一些函数。<br><strong>queue.get()</strong> –从队列中取出，如果此时队列为空，阻塞<br><strong>queue.put()</strong> –放入队列中，如果此时队列满了，阻塞<br><strong>queue.full()</strong> –如果队列满了，返回True,反之False<br><strong>queue.empty()</strong> –如果队列为空，返回True,反之False<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#AND型信号量解决哲学家进餐问题</span></div><div class="line"><span class="keyword">import</span>  threading</div><div class="line"><span class="keyword">import</span>  time</div><div class="line"><span class="keyword">import</span>  queue</div><div class="line"></div><div class="line"><span class="comment">#哲学家人数同样是筷子数</span></div><div class="line">phlioNum = <span class="number">5</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.num = num</div><div class="line">        print(<span class="string">"Philosopher %s is thinking"</span>%self.num)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="comment">#and型信号量</span></div><div class="line">            <span class="keyword">if</span> chopsticks[self.num].full() <span class="keyword">and</span> chopsticks[(self.num+<span class="number">1</span>)%<span class="number">5</span>].full():</div><div class="line">                chopsticks[self.num].get()</div><div class="line">                chopsticks[(self.num + <span class="number">1</span>) % <span class="number">5</span>].get()</div><div class="line">                print(<span class="string">"Philosopher %s is eating"</span> % self.num)</div><div class="line">                time.sleep(<span class="number">3</span>)</div><div class="line">                chopsticks[self.num].put(<span class="number">1</span>)</div><div class="line">                chopsticks[(self.num + <span class="number">1</span>) % <span class="number">5</span>].put(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line">chopsticks = []</div><div class="line">philosophers = []</div><div class="line"><span class="comment">#声明queue即筷子资源</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,phlioNum):</div><div class="line">    chopsticks.append(queue.Queue(maxsize=<span class="number">1</span>))</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> chopsticks:</div><div class="line">    x.put(<span class="number">1</span>)</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,phlioNum):</div><div class="line">    philosophers.append(Philosopher(x))</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> philosophers:</div><div class="line">    x.start()</div></pre></td></tr></table></figure></p>
<p>p.s. 持续撸中…</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> OS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进程同步问题-读者写者]]></title>
      <url>http://yoursite.com/2017/05/02/process-reader-writer/</url>
      <content type="html"><![CDATA[<p>操作系统进程同步问题<strong>第二弹</strong>：读者写者问题</p>
<hr>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>1.允许多个读进程进行读操作<br>2.不允许读和写同时进行操作<br>3.不允许多个读进程进行写操作<br>读者和写者问题其实可以分为三种：<strong>读者优先</strong> <strong>写者优先</strong> <strong>公平竞争</strong><br>读者优先和公平竞争之间只差了一个信号量来对读写进程进行平等访问。读者优先可能造成写进程饿死，公平竞争的结果则是所有读进程结束后写进程才允许进行。而对与写者优先来说，读操作进行前需让出资源给写进程。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>ps.<strong>condition.acquire()</strong> 与 <strong>condition.release()</strong> 间的通信尤为重要<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#读者写者公平竞争</span></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Condition</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="keyword">global</span> readcount,write,read,qc</div><div class="line"><span class="comment"># 读者进程数</span></div><div class="line">readernum = <span class="number">5</span></div><div class="line"><span class="comment"># 读者数信号量计数</span></div><div class="line">readcount=<span class="number">0</span></div><div class="line"><span class="comment"># 读者写者互斥访问</span></div><div class="line">write=<span class="number">0</span></div><div class="line"><span class="comment"># 读者信号量</span></div><div class="line">read=<span class="number">0</span></div><div class="line"><span class="comment"># 读者写者公平竞争信号量</span></div><div class="line">qc = <span class="number">0</span></div><div class="line">rmutex=Condition()<span class="comment">#readcount访问互斥</span></div><div class="line">wmutex=Condition()<span class="comment">#读写互斥</span></div><div class="line">queue=Condition() <span class="comment">#公平竞争</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">	<span class="string">"""读者进程"""</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num )</span>:</span></div><div class="line">		threading.Thread.__init__(self)</div><div class="line">		self.num=num</div><div class="line">		print(<span class="string">'reader %s'</span>%(num))</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">global</span> readcount,write,read,qc</div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			queue.acquire()</div><div class="line">			<span class="keyword">if</span> qc==<span class="number">1</span>:</div><div class="line">				queue.wait()</div><div class="line">			qc=<span class="number">1</span></div><div class="line">			rmutex.acquire()</div><div class="line">			<span class="keyword">if</span> read==<span class="number">1</span>:</div><div class="line">				rmutex.wait()</div><div class="line">			read=<span class="number">1</span></div><div class="line">			<span class="keyword">if</span> readcount==<span class="number">0</span> :</div><div class="line">				wmutex.acquire()</div><div class="line">				<span class="keyword">if</span> write!=<span class="number">0</span>:</div><div class="line">					print(<span class="string">'Reader want to read but writer is writing now!'</span>)</div><div class="line">					wmutex.wait()</div><div class="line">					print(<span class="string">'Reader is notified by writer'</span>)</div><div class="line">					wmutex.release()</div><div class="line">				<span class="keyword">else</span>:</div><div class="line">					wmutex.release()</div><div class="line">			readcount+=<span class="number">1</span></div><div class="line">			print(<span class="string">"reader%s %s++"</span>%(self.num,readcount))</div><div class="line">			read=<span class="number">0</span></div><div class="line">			rmutex.notify()</div><div class="line">			rmutex.release()</div><div class="line">			qc=<span class="number">0</span></div><div class="line">			queue.notify()</div><div class="line">			queue.release()</div><div class="line"></div><div class="line">			print(<span class="string">"Reader%s is reading now!"</span>%(self.num))</div><div class="line">			time.sleep(random.randint(<span class="number">1</span>,<span class="number">5</span>))</div><div class="line">			rmutex.acquire()</div><div class="line">			<span class="keyword">if</span> read==<span class="number">1</span>:</div><div class="line">				rmutex.wait()</div><div class="line">			read=<span class="number">1</span></div><div class="line">			readcount-=<span class="number">1</span></div><div class="line">			print(<span class="string">"reader%s %s--"</span>%(self.num,readcount))</div><div class="line">			read=<span class="number">0</span></div><div class="line">			<span class="keyword">if</span> readcount==<span class="number">0</span>:</div><div class="line">				wmutex.acquire()</div><div class="line">				<span class="keyword">if</span>(write==<span class="number">0</span>):</div><div class="line">					wmutex.notify()</div><div class="line">					wmutex.release()</div><div class="line">				<span class="keyword">else</span>:</div><div class="line">					wmutex.release()</div><div class="line">			rmutex.notify()</div><div class="line">			rmutex.release()</div><div class="line">			print(<span class="string">"Reader%s has finishied reading!"</span>%(self.num))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Writer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">global</span> readcount,write,qc</div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			queue.acquire()</div><div class="line">			<span class="keyword">if</span> qc==<span class="number">1</span>:</div><div class="line">				queue.wait()</div><div class="line">			qc = <span class="number">1</span></div><div class="line">			wmutex.acquire()</div><div class="line">			<span class="keyword">if</span> readcount!=<span class="number">0</span>:</div><div class="line">				print(<span class="string">'Writer want to write but reader is reading now!'</span>)</div><div class="line">				wmutex.wait()</div><div class="line">				print(<span class="string">"Writer is notified by readers!"</span>)</div><div class="line">			write=<span class="number">1</span></div><div class="line">			print(<span class="string">'Writer is writing now!'</span>)</div><div class="line">			time.sleep(<span class="number">5</span>)</div><div class="line">			write=<span class="number">0</span></div><div class="line">			wmutex.notify()</div><div class="line">			wmutex.release()</div><div class="line">			qc=<span class="number">0</span></div><div class="line">			queue.notify()</div><div class="line">			queue.release()</div><div class="line">			print(<span class="string">'Finished writing!'</span>)</div><div class="line"></div><div class="line">Writer().start()</div><div class="line">Readers = []</div><div class="line"><span class="comment"># 创建读者5个进程</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,readernum):</div><div class="line">	Readers.append(Reader(x))</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> Readers:</div><div class="line">	x.start()</div></pre></td></tr></table></figure></p>
<p>p.s. 还有三个进程同步问题…持续中…</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> OS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进程同步问题-生产者消费者]]></title>
      <url>http://yoursite.com/2017/04/23/process-consumer-producer/</url>
      <content type="html"><![CDATA[<p>操作系统进程同步问题<strong>第一弹</strong>：生产者消费者问题</p>
<hr>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>操作系统中经典进程同步问题，生产者消费者问题。<strong>producer进程</strong>和<strong>consumer进程</strong>互斥访问资源<br>1.无产品时，consumer阻塞<br>2.产品数量最大时，producer阻塞</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>condition</strong>模块用于处理进程间通信</p>
<h3 id="condition方法"><a href="#condition方法" class="headerlink" title="condition方法"></a>condition方法</h3><p><strong>condition.accquire()</strong> –获得锁<br><strong>condition.wait()</strong> –阻塞等待<br><strong>condition.notify()</strong> –通知阻塞进程，退出阻塞<br><strong>condition.release()</strong> –释放锁<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> random</div><div class="line">product_max_num = <span class="number">5</span></div><div class="line">product_pool = []</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">producer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,cond,name)</span>:</span></div><div class="line">        super(producer, self).__init__()</div><div class="line">        self.cond = cond</div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        queue = range(<span class="number">5</span>)</div><div class="line">        <span class="keyword">global</span> product_pool</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            self.cond.acquire()</div><div class="line">            <span class="keyword">if</span> len(product_pool)==product_max_num:</div><div class="line">                print(<span class="string">"product pool is full!"</span>)</div><div class="line">                self.cond.wait()</div><div class="line">            index = random.choice(queue)</div><div class="line">            print(<span class="string">"%s product %s"</span>  %(self.name,index))</div><div class="line">            product_pool.append(index)</div><div class="line">            self.cond.notify()</div><div class="line">            <span class="comment"># if len(product_pool)&lt;product_max_num:</span></div><div class="line">            <span class="comment">#     index = random.choice(queue)</span></div><div class="line">            <span class="comment">#     print("%s product %s"  %(self.name,index))</span></div><div class="line">            <span class="comment">#     product_pool.append(index)</span></div><div class="line">            <span class="comment">#     self.cond.notify()</span></div><div class="line">            <span class="comment"># else:</span></div><div class="line">            <span class="comment">#     print("product pool is full!")</span></div><div class="line">            <span class="comment">#     self.cond.wait()</span></div><div class="line">            self.cond.release()</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">consumer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,cond,name)</span>:</span></div><div class="line">        super(consumer, self).__init__()</div><div class="line">        self.cond = cond</div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> product_pool</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            self.cond.acquire()</div><div class="line">            <span class="keyword">if</span> len(product_pool) == <span class="number">0</span>:</div><div class="line">                print(<span class="string">"product pool is empty!"</span>)</div><div class="line">                self.cond.wait()</div><div class="line">            index = product_pool.pop(<span class="number">0</span>)</div><div class="line">            print(<span class="string">"%s consume %s"</span> %(self.name,index))</div><div class="line">            self.cond.notify()</div><div class="line">            <span class="comment"># if len(product_pool)&gt;0:</span></div><div class="line">            <span class="comment">#     index = product_pool.pop(0)</span></div><div class="line">            <span class="comment">#     print("%s consume %s" %(self.name,index))</span></div><div class="line">            <span class="comment">#     self.cond.notify()</span></div><div class="line">            <span class="comment"># else:</span></div><div class="line">            <span class="comment">#     print("product pool is empty!")</span></div><div class="line">            <span class="comment">#     self.cond.wait()</span></div><div class="line">            self.cond.release()</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line">cond = threading.Condition()</div><div class="line">producer = producer(cond,<span class="string">'producer'</span>)</div><div class="line">consumer = consumer(cond,<span class="string">'consumer'</span>)</div><div class="line">producer.start()</div><div class="line">consumer.start()</div><div class="line">producer.join()</div><div class="line">consumer.join()</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> OS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ajax实现图片上传]]></title>
      <url>http://yoursite.com/2017/03/25/img-upload/</url>
      <content type="html"><![CDATA[<p>  写项目的时候需要图片上传功能，这在web开发中也是比较普遍的功能。今天整理出一段时间关于图片上传的知识。<br>一般上传图片的时候都需要图片预览，之后再提交，上传服务器。关于图片预览需要用到html5里的一些知识。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- file类型的input，绑定uploadImg事件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"上传图片"</span> <span class="attr">onchange</span>=<span class="string">"uploadImg(this)"</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"img"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>个人觉得ajax上传图片用户体验比较好，当然你也可以做成表单提交这里写了两个比较基本的判断，判断是否为图片格式<br>和图片大小（最大为2M）。HTML5定义了<strong>FileReader</strong>作为文件API的重要成员用于读取文件，实现了图片预览。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadImg</span>(<span class="params">source</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> name = source.value;</div><div class="line">	<span class="keyword">var</span> file = source.files[<span class="number">0</span>];</div><div class="line">	<span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();					</div><div class="line">	<span class="comment">//正则判断上传文件格式</span></div><div class="line">	<span class="keyword">if</span>(!<span class="regexp">/\.(gif|jpg|png|jpeg)$/</span>.test(name))&#123;	</div><div class="line">		alert(<span class="string">'上传的必须要是图片'</span>);</div><div class="line">		source.value=<span class="string">""</span>;</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//判断上传文件大小</span></div><div class="line">	<span class="keyword">if</span>(file/<span class="number">1024</span>&gt;<span class="number">2000</span>)&#123;							</div><div class="line">		alert(<span class="string">'上传的图片必须小于2m'</span>);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//图片预览</span></div><div class="line">	<span class="keyword">if</span>(<span class="built_in">window</span>.FileReader)&#123;                      </div><div class="line">		<span class="keyword">var</span> reader  = <span class="keyword">new</span> FileReader();</div><div class="line">		reader.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">			$(<span class="string">'#img'</span>).attr(<span class="string">'src'</span>,e.target.result)</div><div class="line">		&#125;</div><div class="line">		reader.readAsDataURL(file);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		alert(<span class="string">'browser not support!'</span>);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">	fd.append(<span class="string">"upfile"</span>,file);</div><div class="line">	<span class="comment">//ajax upload</span></div><div class="line">	$.ajax(&#123;									</div><div class="line">		<span class="attr">url</span>:url,</div><div class="line">		<span class="attr">type</span>:<span class="string">'POST'</span>,</div><div class="line">		<span class="attr">data</span>:fd,</div><div class="line">		<span class="comment">//阻止序列化操作</span></div><div class="line">		processData:<span class="literal">false</span>,                      </div><div class="line">		<span class="attr">contentType</span>:<span class="literal">false</span>,</div><div class="line">		<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">'ok'</span>);</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">			    <span class="built_in">console</span>.log(<span class="string">'no'</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于后端语言和框架的使用就看个人喜好了。反正我用的是php。上面是一个简单的单个图片上传，可能之后有时间会去做一下多图片的和可拖拽的…</p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[express下模板引擎共存]]></title>
      <url>http://yoursite.com/2017/03/24/windows-nodejs-express/</url>
      <content type="html"><![CDATA[<p>最近在学nodejs下的express框架。Express中需要模板引擎来渲染模板文件，也就是我们平常说的html文件。<br>在express工程中默认是jade视图引擎，但我想用html来写我的视图文件，需要ejs模板引擎，那如何让两种模<br>板引擎共同存在。</p>
<p>cmd安装nodejs模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install consolidate</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express-hogan</div></pre></td></tr></table></figure>
<p>在express的app.js中设置模板引擎<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> engines = <span class="built_in">require</span>(<span class="string">'consolidate'</span>);</div><div class="line"></div><div class="line">app.engine(<span class="string">'haml'</span>, engines.haml);</div><div class="line">app.engine(<span class="string">'html'</span>, engines.hogan);</div><div class="line"></div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</div></pre></td></tr></table></figure></p>
<p>完成！</p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello]]></title>
      <url>http://yoursite.com/2017/03/24/Hello/</url>
      <content type="html"><![CDATA[<p>我的新博客又诞生了，第一次用静态博客感觉不错，以后会update。<br>关于作者:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> I = &#123;</div><div class="line"><span class="attr">Name</span>: 致宇哥哥,</div><div class="line"><span class="attr">Age</span>: <span class="number">21</span>,</div><div class="line"><span class="attr">School</span>: BUCT,</div><div class="line"><span class="attr">Major</span>: CS,</div><div class="line"><span class="attr">Home</span>: Zhejiang,</div><div class="line"><span class="attr">Phone</span>: <span class="number">13011136566</span>,</div><div class="line"><span class="attr">Email</span>: <span class="number">857188491</span>@qq.com</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
