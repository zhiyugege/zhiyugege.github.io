<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[进程同步问题-哲学家进餐问题]]></title>
      <url>http://yoursite.com/2017/05/03/process-philosophers/</url>
      <content type="html"><![CDATA[<p>操作系统进程同步问题<strong>第三弹</strong>：哲学家进餐问题</p>
<hr>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>问题很简单，n个哲学家n支筷子，只有哲学家拿起两支筷子的时候才可以进餐，同样是一个经典的进程同步问题，第n个哲学家的左手边筷子和第n+1个哲学家右手边的筷子是互斥访问的资源。但同样会存在一个问题：<strong>死锁</strong>。这样的情景很好想。解决死锁问题有很多种的做法<br>1.规定在拿到左侧的筷子后，先检查右面的筷子是否可用。如果不可用，则先放下左侧筷子，等一段时间再重复整个过程。<br>2.最多允许四个哲学家同时进餐,以保证至少有一个哲学家能够进餐,最终总会释 放出他所使用过的两支筷子,从而可使更多的哲学家进餐。<br>3.将拿左筷子，与拿右筷子当做一个<strong>原子操作</strong>（即当左右都拿起的时候才可以进餐）<br>这里选择的是第三种的<strong>AND信号量机制</strong>。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>之前解决进程间通信问题用的是condition，这里使用的是threading中的<strong>Queue</strong>方法，之前消费者问题也用过这样的方法。</p>
<p>###三种类型queue<br>1.基本FIFO队列–先进先出        <em>class Queue.Queue(maxsize=0)</em><br>2.LIFO队列–先进后出        <em>class Queue.LifoQueue(maxsize=0)</em><br>3.优先级队列        <em>class Queue.PriorityQueue(maxsize=0)</em></p>
<h3 id="queue中常用函数"><a href="#queue中常用函数" class="headerlink" title="queue中常用函数"></a>queue中常用函数</h3><p>queue中封装了一些函数。<br><strong>queue.get()</strong> –从队列中取出，如果此时队列为空，阻塞<br><strong>queue.put()</strong> –放入队列中，如果此时队列满了，阻塞<br><strong>queue.full()</strong> –如果队列满了，返回True,反之False<br><strong>queue.empty()</strong> –如果队列为空，返回True,反之False<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#AND型信号量解决哲学家进餐问题</span></div><div class="line"><span class="keyword">import</span>  threading</div><div class="line"><span class="keyword">import</span>  time</div><div class="line"><span class="keyword">import</span>  queue</div><div class="line"></div><div class="line"><span class="comment">#哲学家人数同样是筷子数</span></div><div class="line">phlioNum = <span class="number">5</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.num = num</div><div class="line">        print(<span class="string">"Philosopher %s is thinking"</span>%self.num)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="comment">#and型信号量</span></div><div class="line">            <span class="keyword">if</span> chopsticks[self.num].full() <span class="keyword">and</span> chopsticks[(self.num+<span class="number">1</span>)%<span class="number">5</span>].full():</div><div class="line">                chopsticks[self.num].get()</div><div class="line">                chopsticks[(self.num + <span class="number">1</span>) % <span class="number">5</span>].get()</div><div class="line">                print(<span class="string">"Philosopher %s is eating"</span> % self.num)</div><div class="line">                time.sleep(<span class="number">3</span>)</div><div class="line">                chopsticks[self.num].put(<span class="number">1</span>)</div><div class="line">                chopsticks[(self.num + <span class="number">1</span>) % <span class="number">5</span>].put(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line">chopsticks = []</div><div class="line">philosophers = []</div><div class="line"><span class="comment">#声明queue即筷子资源</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,phlioNum):</div><div class="line">    chopsticks.append(queue.Queue(maxsize=<span class="number">1</span>))</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> chopsticks:</div><div class="line">    x.put(<span class="number">1</span>)</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,phlioNum):</div><div class="line">    philosophers.append(Philosopher(x))</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> philosophers:</div><div class="line">    x.start()</div></pre></td></tr></table></figure></p>
<p>p.s. 持续撸中…</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> OS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进程同步问题-读者写者]]></title>
      <url>http://yoursite.com/2017/05/02/process-reader-writer/</url>
      <content type="html"><![CDATA[<p>操作系统进程同步问题<strong>第二弹</strong>：读者写者问题</p>
<hr>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>1.允许多个读进程进行读操作<br>2.不允许读和写同时进行操作<br>3.不允许多个读进程进行写操作<br>读者和写者问题其实可以分为三种：<strong>读者优先</strong> <strong>写者优先</strong> <strong>公平竞争</strong><br>读者优先和公平竞争之间只差了一个信号量来对读写进程进行平等访问。读者优先可能造成写进程饿死，公平竞争的结果则是所有读进程结束后写进程才允许进行。而对与写者优先来说，读操作进行前需让出资源给写进程。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>ps.<strong>condition.acquire()</strong> 与 <strong>condition.release()</strong> 间的通信尤为重要<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#读者写者公平竞争</span></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Condition</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="keyword">global</span> readcount,write,read,qc</div><div class="line"><span class="comment"># 读者进程数</span></div><div class="line">readernum = <span class="number">5</span></div><div class="line"><span class="comment"># 读者数信号量计数</span></div><div class="line">readcount=<span class="number">0</span></div><div class="line"><span class="comment"># 读者写者互斥访问</span></div><div class="line">write=<span class="number">0</span></div><div class="line"><span class="comment"># 读者信号量</span></div><div class="line">read=<span class="number">0</span></div><div class="line"><span class="comment"># 读者写者公平竞争信号量</span></div><div class="line">qc = <span class="number">0</span></div><div class="line">rmutex=Condition()<span class="comment">#readcount访问互斥</span></div><div class="line">wmutex=Condition()<span class="comment">#读写互斥</span></div><div class="line">queue=Condition() <span class="comment">#公平竞争</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">	<span class="string">"""读者进程"""</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num )</span>:</span></div><div class="line">		threading.Thread.__init__(self)</div><div class="line">		self.num=num</div><div class="line">		print(<span class="string">'reader %s'</span>%(num))</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">global</span> readcount,write,read,qc</div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			queue.acquire()</div><div class="line">			<span class="keyword">if</span> qc==<span class="number">1</span>:</div><div class="line">				queue.wait()</div><div class="line">			qc=<span class="number">1</span></div><div class="line">			rmutex.acquire()</div><div class="line">			<span class="keyword">if</span> read==<span class="number">1</span>:</div><div class="line">				rmutex.wait()</div><div class="line">			read=<span class="number">1</span></div><div class="line">			<span class="keyword">if</span> readcount==<span class="number">0</span> :</div><div class="line">				wmutex.acquire()</div><div class="line">				<span class="keyword">if</span> write!=<span class="number">0</span>:</div><div class="line">					print(<span class="string">'Reader want to read but writer is writing now!'</span>)</div><div class="line">					wmutex.wait()</div><div class="line">					print(<span class="string">'Reader is notified by writer'</span>)</div><div class="line">					wmutex.release()</div><div class="line">				<span class="keyword">else</span>:</div><div class="line">					wmutex.release()</div><div class="line">			readcount+=<span class="number">1</span></div><div class="line">			print(<span class="string">"reader%s %s++"</span>%(self.num,readcount))</div><div class="line">			read=<span class="number">0</span></div><div class="line">			rmutex.notify()</div><div class="line">			rmutex.release()</div><div class="line">			qc=<span class="number">0</span></div><div class="line">			queue.notify()</div><div class="line">			queue.release()</div><div class="line"></div><div class="line">			print(<span class="string">"Reader%s is reading now!"</span>%(self.num))</div><div class="line">			time.sleep(random.randint(<span class="number">1</span>,<span class="number">5</span>))</div><div class="line">			rmutex.acquire()</div><div class="line">			<span class="keyword">if</span> read==<span class="number">1</span>:</div><div class="line">				rmutex.wait()</div><div class="line">			read=<span class="number">1</span></div><div class="line">			readcount-=<span class="number">1</span></div><div class="line">			print(<span class="string">"reader%s %s--"</span>%(self.num,readcount))</div><div class="line">			read=<span class="number">0</span></div><div class="line">			<span class="keyword">if</span> readcount==<span class="number">0</span>:</div><div class="line">				wmutex.acquire()</div><div class="line">				<span class="keyword">if</span>(write==<span class="number">0</span>):</div><div class="line">					wmutex.notify()</div><div class="line">					wmutex.release()</div><div class="line">				<span class="keyword">else</span>:</div><div class="line">					wmutex.release()</div><div class="line">			rmutex.notify()</div><div class="line">			rmutex.release()</div><div class="line">			print(<span class="string">"Reader%s has finishied reading!"</span>%(self.num))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Writer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">global</span> readcount,write,qc</div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			queue.acquire()</div><div class="line">			<span class="keyword">if</span> qc==<span class="number">1</span>:</div><div class="line">				queue.wait()</div><div class="line">			qc = <span class="number">1</span></div><div class="line">			wmutex.acquire()</div><div class="line">			<span class="keyword">if</span> readcount!=<span class="number">0</span>:</div><div class="line">				print(<span class="string">'Writer want to write but reader is reading now!'</span>)</div><div class="line">				wmutex.wait()</div><div class="line">				print(<span class="string">"Writer is notified by readers!"</span>)</div><div class="line">			write=<span class="number">1</span></div><div class="line">			print(<span class="string">'Writer is writing now!'</span>)</div><div class="line">			time.sleep(<span class="number">5</span>)</div><div class="line">			write=<span class="number">0</span></div><div class="line">			wmutex.notify()</div><div class="line">			wmutex.release()</div><div class="line">			qc=<span class="number">0</span></div><div class="line">			queue.notify()</div><div class="line">			queue.release()</div><div class="line">			print(<span class="string">'Finished writing!'</span>)</div><div class="line"></div><div class="line">Writer().start()</div><div class="line">Readers = []</div><div class="line"><span class="comment"># 创建读者5个进程</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,readernum):</div><div class="line">	Readers.append(Reader(x))</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> Readers:</div><div class="line">	x.start()</div></pre></td></tr></table></figure></p>
<p>p.s. 还有三个进程同步问题…持续中…</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> OS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进程同步问题-生产者消费者]]></title>
      <url>http://yoursite.com/2017/04/23/process-consumer-producer/</url>
      <content type="html"><![CDATA[<p>操作系统进程同步问题<strong>第一弹</strong>：生产者消费者问题</p>
<hr>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>操作系统中经典进程同步问题，生产者消费者问题。<strong>producer进程</strong>和<strong>consumer进程</strong>互斥访问资源<br>1.无产品时，consumer阻塞<br>2.产品数量最大时，producer阻塞</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>condition</strong>模块用于处理进程间通信</p>
<h3 id="condition方法"><a href="#condition方法" class="headerlink" title="condition方法"></a>condition方法</h3><p><strong>condition.accquire()</strong> –获得锁<br><strong>condition.wait()</strong> –阻塞等待<br><strong>condition.notify()</strong> –通知阻塞进程，退出阻塞<br><strong>condition.release()</strong> –释放锁<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> random</div><div class="line">product_max_num = <span class="number">5</span></div><div class="line">product_pool = []</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">producer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,cond,name)</span>:</span></div><div class="line">        super(producer, self).__init__()</div><div class="line">        self.cond = cond</div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        queue = range(<span class="number">5</span>)</div><div class="line">        <span class="keyword">global</span> product_pool</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            self.cond.acquire()</div><div class="line">            <span class="keyword">if</span> len(product_pool)==product_max_num:</div><div class="line">                print(<span class="string">"product pool is full!"</span>)</div><div class="line">                self.cond.wait()</div><div class="line">            index = random.choice(queue)</div><div class="line">            print(<span class="string">"%s product %s"</span>  %(self.name,index))</div><div class="line">            product_pool.append(index)</div><div class="line">            self.cond.notify()</div><div class="line">            <span class="comment"># if len(product_pool)&lt;product_max_num:</span></div><div class="line">            <span class="comment">#     index = random.choice(queue)</span></div><div class="line">            <span class="comment">#     print("%s product %s"  %(self.name,index))</span></div><div class="line">            <span class="comment">#     product_pool.append(index)</span></div><div class="line">            <span class="comment">#     self.cond.notify()</span></div><div class="line">            <span class="comment"># else:</span></div><div class="line">            <span class="comment">#     print("product pool is full!")</span></div><div class="line">            <span class="comment">#     self.cond.wait()</span></div><div class="line">            self.cond.release()</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">consumer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,cond,name)</span>:</span></div><div class="line">        super(consumer, self).__init__()</div><div class="line">        self.cond = cond</div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> product_pool</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            self.cond.acquire()</div><div class="line">            <span class="keyword">if</span> len(product_pool) == <span class="number">0</span>:</div><div class="line">                print(<span class="string">"product pool is empty!"</span>)</div><div class="line">                self.cond.wait()</div><div class="line">            index = product_pool.pop(<span class="number">0</span>)</div><div class="line">            print(<span class="string">"%s consume %s"</span> %(self.name,index))</div><div class="line">            self.cond.notify()</div><div class="line">            <span class="comment"># if len(product_pool)&gt;0:</span></div><div class="line">            <span class="comment">#     index = product_pool.pop(0)</span></div><div class="line">            <span class="comment">#     print("%s consume %s" %(self.name,index))</span></div><div class="line">            <span class="comment">#     self.cond.notify()</span></div><div class="line">            <span class="comment"># else:</span></div><div class="line">            <span class="comment">#     print("product pool is empty!")</span></div><div class="line">            <span class="comment">#     self.cond.wait()</span></div><div class="line">            self.cond.release()</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line">cond = threading.Condition()</div><div class="line">producer = producer(cond,<span class="string">'producer'</span>)</div><div class="line">consumer = consumer(cond,<span class="string">'consumer'</span>)</div><div class="line">producer.start()</div><div class="line">consumer.start()</div><div class="line">producer.join()</div><div class="line">consumer.join()</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> OS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ajax实现图片上传]]></title>
      <url>http://yoursite.com/2017/03/25/img-upload/</url>
      <content type="html"><![CDATA[<p>  写项目的时候需要图片上传功能，这在web开发中也是比较普遍的功能。今天整理出一段时间关于图片上传的知识。<br>一般上传图片的时候都需要图片预览，之后再提交，上传服务器。关于图片预览需要用到html5里的一些知识。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- file类型的input，绑定uploadImg事件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"上传图片"</span> <span class="attr">onchange</span>=<span class="string">"uploadImg(this)"</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"img"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>个人觉得ajax上传图片用户体验比较好，当然你也可以做成表单提交这里写了两个比较基本的判断，判断是否为图片格式<br>和图片大小（最大为2M）。HTML5定义了<strong>FileReader</strong>作为文件API的重要成员用于读取文件，实现了图片预览。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadImg</span>(<span class="params">source</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> name = source.value;</div><div class="line">	<span class="keyword">var</span> file = source.files[<span class="number">0</span>];</div><div class="line">	<span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();					</div><div class="line">	<span class="comment">//正则判断上传文件格式</span></div><div class="line">	<span class="keyword">if</span>(!<span class="regexp">/\.(gif|jpg|png|jpeg)$/</span>.test(name))&#123;	</div><div class="line">		alert(<span class="string">'上传的必须要是图片'</span>);</div><div class="line">		source.value=<span class="string">""</span>;</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//判断上传文件大小</span></div><div class="line">	<span class="keyword">if</span>(file/<span class="number">1024</span>&gt;<span class="number">2000</span>)&#123;							</div><div class="line">		alert(<span class="string">'上传的图片必须小于2m'</span>);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//图片预览</span></div><div class="line">	<span class="keyword">if</span>(<span class="built_in">window</span>.FileReader)&#123;                      </div><div class="line">		<span class="keyword">var</span> reader  = <span class="keyword">new</span> FileReader();</div><div class="line">		reader.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">			$(<span class="string">'#img'</span>).attr(<span class="string">'src'</span>,e.target.result)</div><div class="line">		&#125;</div><div class="line">		reader.readAsDataURL(file);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		alert(<span class="string">'browser not support!'</span>);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">	fd.append(<span class="string">"upfile"</span>,file);</div><div class="line">	<span class="comment">//ajax upload</span></div><div class="line">	$.ajax(&#123;									</div><div class="line">		<span class="attr">url</span>:url,</div><div class="line">		<span class="attr">type</span>:<span class="string">'POST'</span>,</div><div class="line">		<span class="attr">data</span>:fd,</div><div class="line">		<span class="comment">//阻止序列化操作</span></div><div class="line">		processData:<span class="literal">false</span>,                      </div><div class="line">		<span class="attr">contentType</span>:<span class="literal">false</span>,</div><div class="line">		<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">'ok'</span>);</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">			    <span class="built_in">console</span>.log(<span class="string">'no'</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于后端语言和框架的使用就看个人喜好了。反正我用的是php。上面是一个简单的单个图片上传，可能之后有时间会去做一下多图片的和可拖拽的…</p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[express下模板引擎共存]]></title>
      <url>http://yoursite.com/2017/03/24/windows-nodejs-express/</url>
      <content type="html"><![CDATA[<p>最近在学nodejs下的express框架。Express中需要模板引擎来渲染模板文件，也就是我们平常说的html文件。<br>在express工程中默认是jade视图引擎，但我想用html来写我的视图文件，需要ejs模板引擎，那如何让两种模<br>板引擎共同存在。</p>
<p>cmd安装nodejs模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install consolidate</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express-hogan</div></pre></td></tr></table></figure>
<p>在express的app.js中设置模板引擎<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> engines = <span class="built_in">require</span>(<span class="string">'consolidate'</span>);</div><div class="line"></div><div class="line">app.engine(<span class="string">'haml'</span>, engines.haml);</div><div class="line">app.engine(<span class="string">'html'</span>, engines.hogan);</div><div class="line"></div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</div></pre></td></tr></table></figure></p>
<p>完成！</p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello]]></title>
      <url>http://yoursite.com/2017/03/24/Hello/</url>
      <content type="html"><![CDATA[<p>我的新博客又诞生了，第一次用静态博客感觉不错，以后会update。<br>关于作者:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> I = &#123;</div><div class="line"><span class="attr">Name</span>: 致宇哥哥,</div><div class="line"><span class="attr">Age</span>: <span class="number">21</span>,</div><div class="line"><span class="attr">School</span>: BUCT,</div><div class="line"><span class="attr">Major</span>: CS,</div><div class="line"><span class="attr">Home</span>: Zhejiang,</div><div class="line"><span class="attr">Phone</span>: <span class="number">13011136566</span>,</div><div class="line"><span class="attr">Email</span>: <span class="number">857188491</span>@qq.com</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
